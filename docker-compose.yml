version: '4.23'

services:

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.4
    container_name: keycloak
    ports:
      - "8080:8080"
    environment:
      KC_DB: postgres                    # Database type (use postgres or mariadb)
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak      # Database username
      KC_DB_PASSWORD: keycloak  # Database password
      KC_HOSTNAME: localhost
      KC_BOOTSTRAP_ADMIN_USERNAME: admin                    # Keycloak admin username
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin        # Keycloak admin password
    command:
      - start-dev
    depends_on:
      - postgres
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    #    ports:
    #      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - loki

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9005:9000"   # MinIO API
      - "9001:9001"   # MinIO Console (Web UI)
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # Optional: Set custom access key and secret key
      # MINIO_ACCESS_KEY: your-access-key
      # MINIO_SECRET_KEY: your-secret-key
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - minio_network
    restart: unless-stopped

volumes:
  postgres_data:  # Uncommented for data persistence
  elasticsearch-data:
  minio_data:
networks:
  default:
    driver: bridge
#  elk:
#    driver: bridge
  loki:
    driver: bridge
  minio_network:
    driver: bridge